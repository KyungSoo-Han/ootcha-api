<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ootcha.wms.mapper.inboundreq.InboundReqMapper">

    <select id="findInboundReq" parameterType="com.ootcha.wms.dto.inboundreq.InboundReqSrchDto" resultType="com.ootcha.wms.dto.inboundreq.InboundReqDto" >
        select
             a.biz_cd
            ,a.inbound_req_dt
            ,a.inbound_req_no
            ,a.center_cd
            ,a.customer_cd
            ,c.customer_nm
            ,a.supplier_cd
            ,d.supplier_nm
            ,a.inbound_type
            ,a.inbound_exp_dt
            ,a.remark
            ,b.inbound_req_seq
            ,b.item_cd
            ,e.item_nm
            ,b.exp_dt
            ,b.make_dt
            ,b.make_lot_no
            ,b.price
            ,b.qty
            ,b.sub_remark
        from t_inbound_req a
        left join t_inbound_req_item b on a.biz_cd = b.biz_cd
                                              and a.inbound_req_dt = b.inbound_req_dt
                                              and a.inbound_req_no = b.inbound_req_no
        left join t_customer c on a.biz_cd = c.biz_cd and a.customer_cd = c.customer_cd
        left join t_supplier d on a.biz_cd = d.biz_cd and a.customer_cd = d.customer_cd and a.supplier_cd = d.supplier_cd
        left join t_item e on a.biz_cd = e.biz_cd and a.customer_cd = e.customer_cd and b.item_cd = e.item_cd
        where a.biz_cd = #{bizCd}
            and a.center_cd = #{centerCd}
        <if test='inboundReqDt != null'>
            and a.inbound_req_dt = #{inboundReqDt}
        </if>
          <if test='inboundReqNo != null'>
            and a.inbound_req_no = #{inboundReqNo}
          </if>
          <if test='inboundExpDt != null'>
            and a.inbound_exp_dt = #{inboundExpDt}
          </if>
    </select>

    <select id="findInboundReqList" parameterType="com.ootcha.wms.dto.inboundreq.InboundReqSrchDto" resultType="com.ootcha.wms.dto.inboundreq.InboundReqDto" >
        select
            a.biz_cd
            ,a.inbound_req_dt
            ,a.inbound_req_no
            ,a.center_cd
            ,a.customer_cd
            ,c.customer_nm
            ,a.supplier_cd
            ,d.supplier_nm
            ,a.inbound_type
            ,a.inbound_exp_dt
            ,a.remark
            ,b.inbound_req_seq
            ,b.item_cd
            ,e.item_nm
            ,b.exp_dt
            ,b.make_dt
            ,b.make_lot_no
            ,b.price
            ,b.qty
            ,b.sub_remark
            ,c.customer_cd
            ,c.customer_nm
        from t_inbound_req a
            left join t_inbound_req_item b on a.biz_cd = b.biz_cd
                                                    and a.inbound_req_dt = b.inbound_req_dt
                                                    and a.inbound_req_no = b.inbound_req_no
            left join t_customer c on a.biz_cd = c.biz_cd and a.customer_cd = c.customer_cd
            left join t_supplier d on a.biz_cd = d.biz_cd and a.customer_cd = d.customer_cd and a.supplier_cd = d.supplier_cd
            left join t_item e on a.biz_cd = e.biz_cd and a.customer_cd = e.customer_cd and b.item_cd = e.item_cd
        where a.biz_cd = #{bizCd}
        and a.center_cd = #{centerCd}
        and a.inbound_req_dt between #{inboundReqFromDt} and #{inboundReqToDt}
        <if test='inboundReqNo != null'>
            and a.inbound_req_no = #{inboundReqNo}
        </if>
        <if test='customerCd != null'>
            and a.customer_cd = #{customerCd}
        </if>
        <if test='supplierCd != null'>
            and a.supplier_cd = #{supplierCd}
        </if>
     <!--   <if test="status != null">
            and a.status = #{status}
        </if>-->
    </select>

    <insert id="saveInboundReq" parameterType="com.ootcha.wms.dto.inboundreq.InboundReqDto" >

        <selectKey keyProperty="inboundReqNo" resultType="integer" order="BEFORE">
            SELECT
                COALESCE(#{inboundReqNo}, (SELECT IFNULL(MAX(inbound_req_no),0)+1
                FROM t_inbound_req
                WHERE biz_cd = #{bizCd} AND inbound_req_dt = #{inboundReqDt})) as inboundReqNo
        </selectKey>

        insert into t_inbound_req
        (
            biz_cd
            ,inbound_req_dt
            ,inbound_req_no
            ,center_cd
            ,customer_cd
            ,supplier_cd
            ,inbound_type
            ,inbound_exp_dt
            ,remark
            ,created_id
            ,created_dt
        )
        values

            (
                #{bizCd}
                ,#{inboundReqDt}
                ,#{inboundReqNo}
                ,#{centerCd}
                ,#{customerCd}
                ,#{supplierCd}
                ,#{inboundType}
                ,#{inboundExpDt}
                ,#{remark}
                ,#{createdId}
                ,now()
            )
        ON DUPLICATE KEY UPDATE
             customer_cd = #{customerCd}
            , supplier_cd = #{supplierCd}
            , inbound_type = #{inboundType}
            , inbound_exp_dt = #{inboundExpDt}
            , remark = #{remark}
            , modified_id = #{createdId}
            , modified_dt = now()
    </insert>

    <insert id="saveInboundReqItem" parameterType="map" >

        <selectKey keyProperty="inboundReqSeq" resultType="integer" order="BEFORE">
            SELECT ifnull(MAX(inbound_req_seq),0) +1
            FROM t_inbound_req_item
            where biz_cd = #{bizCd}
            AND inbound_req_dt = #{inboundReqDt}
            AND inbound_req_no = #{inboundReqNo}
        </selectKey>

        insert into t_inbound_req_item
        (
        inbound_req_dt
        ,inbound_req_no
        ,inbound_req_seq
        ,biz_cd
        ,center_cd
        ,item_cd
        ,exp_dt
        ,make_dt
        ,make_lot_no
        ,price
        ,qty
        ,sub_remark
        ,created_id
        ,created_dt
        )
        values
        <foreach item="item" collection="list"  index = "i" separator=",">
            (
            #{inboundReqDt}
            ,#{inboundReqNo}
            ,
            <if test="item.inboundReqSeq == null">
                #{inboundReqSeq} + #{i}
            </if>
            <if test="item.inboundReqSeq != null">
                #{item.inboundReqSeq}
            </if>
            ,#{bizCd}
            ,#{item.centerCd}
            ,#{item.itemCd}
            ,#{item.expDt}
            ,#{item.makeDt}
            ,#{item.makeLotNo}
            ,#{item.price}
            ,#{item.qty}
            ,#{item.subRemark}
            ,#{item.createdId}
            ,now()
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
            item_cd = VALUES(item_cd),
            exp_dt = VALUES(exp_dt),
            make_dt = VALUES(make_dt),
            make_lot_no = VALUES(make_lot_no),
            price = VALUES(price),
            qty = VALUES(qty),
            sub_remark = VALUES(sub_remark),
            modified_id = VALUES(created_id),
            modified_dt = now()


    </insert>

    <insert id="saveInbound" parameterType="com.ootcha.wms.dto.inbound.InboundDto" >

        <selectKey keyProperty="inboundNo" resultType="integer" order="BEFORE">
            SELECT
            COALESCE(#{inboundNo}, (SELECT IFNULL(MAX(inbound_no),0)+1
            FROM t_inbound
            WHERE biz_cd = #{bizCd} AND inbound_dt = #{inboundDt})) as inboundNo
        </selectKey>

        insert into t_inbound
        (
        biz_cd
        ,inbound_dt
        ,inbound_no
        ,center_cd
        ,customer_cd
        ,supplier_cd
        ,inbound_type
        ,inbound_exp_dt
        ,remark
        ,inbound_req_dt
        ,inbound_req_no
        ,created_id
        ,created_dt
        )
        values

        (
        #{bizCd}
        ,#{inboundDt}
        ,#{inboundNo}
        ,#{centerCd}
        ,#{customerCd}
        ,#{supplierCd}
        ,#{inboundType}
        ,#{inboundExpDt}
        ,#{remark}
        ,#{inboundReqDt}
        ,#{inboundReqNo}
        ,#{createdId}
        ,now()
        )
        ON DUPLICATE KEY UPDATE
        customer_cd = #{customerCd}
        , supplier_cd = #{supplierCd}
        , inbound_type = #{inboundType}
        , inbound_exp_dt = #{inboundExpDt}
        , remark = #{remark}
        , modified_id = #{createdId}
        , modified_dt = now()
    </insert>

    <insert id="saveInboundItem" parameterType="map" >

        <selectKey keyProperty="inboundSeq" resultType="integer" order="BEFORE">
            SELECT ifnull(MAX(inbound_req_seq),0) +1
            FROM t_inbound_item
            where biz_cd = #{bizCd}
            AND inbound_dt = #{inboundDt}
            AND inbound_no = #{inboundNo}
        </selectKey>

        insert into t_inbound_item
        (
        inbound_dt
        ,inbound_no
        ,inbound_seq
        ,biz_cd
        ,center_cd
        ,item_cd
        ,exp_dt
        ,make_dt
        ,make_lot_no
        ,inspect_yn
        ,qty
        ,inbound_req_dt
        ,inbound_req_no
        ,inbound_req_seq
        ,sub_remark
        ,created_id
        ,created_dt
        )
        values
        <foreach item="item" collection="list"  index = "i" separator=",">
            (
            #{inboundDt}
            ,#{inboundNo}
            ,
            <if test="item.inboundSeq == null">
                #{inboundSeq} + #{i}
            </if>
            <if test="item.inboundSeq != null">
                #{item.inboundSeq}
            </if>
            ,#{bizCd}
            ,#{item.centerCd}
            ,#{item.itemCd}
            ,#{item.expDt}
            ,#{item.makeDt}
            ,#{item.makeLotNo}
            ,#{item.inspectYn}
            ,#{item.qty}
            ,#{inboundReqDt}
            ,#{inboundReqNo}
            ,#{inboundReqSeq}
            ,#{item.subRemark}
            ,#{item.createdId}
            ,now()
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
        item_cd = VALUES(item_cd),
        exp_dt = VALUES(exp_dt),
        make_dt = VALUES(make_dt),
        make_lot_no = VALUES(make_lot_no),
        price = VALUES(price),
        qty = VALUES(qty),
        sub_remark = VALUES(sub_remark),
        modified_id = VALUES(created_id),
        modified_dt = now()
    </insert>

    <delete id="deleteInboundReq" parameterType="InboundReqDeleteDto">
        DELETE
        FROM t_inbound_req
        WHERE biz_cd = #{bizCd} AND inbound_req_dt = #{inboundReqDt} AND inbound_req_no = #{inboundReqNo}
    </delete>

    <delete id="deleteInboundReqItem" parameterType="InboundReqDeleteDto">
        DELETE
        FROM t_inbound_req_item
        WHERE biz_cd = #{bizCd} AND inbound_req_dt = #{inboundReqDt} AND inbound_req_no = #{inboundReqNo}
    </delete>

    <delete id="deleteInboundReqList" parameterType="java.util.List">
        DELETE
        FROM t_inbound_req_item
        WHERE biz_cd = #{bizCd} AND inbound_req_dt = #{inboundReqDt} AND inbound_req_no = #{inboundReqNo}
        AND inbound_req_seq in
        <foreach collection="list" item ="i" open="(" close =")" separator=",">
            #{i.inboundReqSeq}
        </foreach>
    </delete>

  <!--  <update id="updateInboundApprRefuse" parameterType="InboundReqUpdateDto">
        UPDATE t_inbound_req
        SET
            STATUS = 1
        WHERE biz_cd = #{bizCd} AND inbound_req_dt = #{inboundReqDt} AND inbound_req_no = #{inboundReqNo};
    </update>-->


    <delete id="deleteInbound" parameterType="InboundDeleteDto">
        Delete
        From t_inbound
        where biz_cd = #{bizCd} AND inbound_dt = #{inboundDt} AND inbound_seq =#{inboundSeq};
    </delete>

    <delete id="deleteInboundItem" parameterType="InboundDeleteDto">
        Delete
        From t_inbound_item
        where biz_cd = #{bizCd} AND inbound_dt = #{inboundDt} AND inbound_seq =#{inboundSeq};
    </delete>

</mapper>